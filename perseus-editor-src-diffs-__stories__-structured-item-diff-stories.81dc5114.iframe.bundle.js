"use strict";(self.webpackChunkperseus=self.webpackChunkperseus||[]).push([[3988],{"./packages/perseus-editor/src/diffs/__stories__/structured-item-diff.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ContentAdded:()=>ContentAdded,ContentAddedRemovedAndChanged:()=>ContentAddedRemovedAndChanged,ContentRemoved:()=>ContentRemoved,MiscContentChanges:()=>MiscContentChanges,default:()=>structured_item_diff_stories});var react=__webpack_require__("./node_modules/react/index.js"),src=__webpack_require__("./packages/perseus/src/index.ts"),index_all=__webpack_require__("./node_modules/underscore/modules/index-all.js"),text_diff=__webpack_require__("./packages/perseus-editor/src/diffs/text-diff.tsx"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types);const performDiff=function(before,after,key){return"object"==typeof before||"object"==typeof after?function(before,after,key){const beforeKeys=index_all.ZP.isObject(before)?(0,index_all.ZP)(before).keys():[],afterKeys=index_all.ZP.isObject(after)?(0,index_all.ZP)(after).keys():[],keys=index_all.ZP.union(beforeKeys,afterKeys),children=index_all.ZP.map(keys,(function(key){return performDiff((before||{})[key],(after||{})[key],key)}));let status;status=void 0===before?"added":void 0===after?"removed":index_all.ZP.any(children,(function(child){return"unchanged"!==child.status}))?"changed":"unchanged";return{after:"",before:"",children,key,status}}(before,after,key):function(before,after,key){let status;return status=before===after?"unchanged":void 0===before?"added":void 0===after?"removed":"changed",{after:JSON.stringify(after),before:JSON.stringify(before),children:[],key,status}}(before,after,key)},widget_diff_performer=performDiff,{SvgImage}=src.components,indentationFromDepth=function(depth){return 20*(depth-1)};class DiffSide extends react.Component{static propTypes={className:prop_types_default().string.isRequired,depth:prop_types_default().number.isRequired,propKey:prop_types_default().string.isRequired,showKey:prop_types_default().bool.isRequired,side:prop_types_default().oneOf(["before","after"]).isRequired,value:prop_types_default().string};render(){const className=classnames_default()(this.props.className,{"diff-row":!0,before:"before"===this.props.side,after:"after"===this.props.side});return react.createElement("div",{className},react.createElement("div",{style:{paddingLeft:indentationFromDepth(this.props.depth)}},this.props.showKey&&this.props.propKey+": ",react.createElement("span",{className:"inner-value dark "+this.props.className},this.props.value)))}}class CollapsedRow extends react.Component{static propTypes={depth:prop_types_default().number,onClick:prop_types_default().func.isRequired};static defaultProps={depth:0};render(){const self=this;return react.createElement("div",{onClick:self.props.onClick,style:{clear:"both"}},index_all.ZP.map(["before","after"],(function(side){return react.createElement("div",{className:"diff-row collapsed "+side,key:side},react.createElement("div",{style:{paddingLeft:indentationFromDepth(self.props.depth)}},react.createElement("span",null," [ show unmodified ] ")))})))}}class DiffEntry extends react.Component{static propTypes={depth:prop_types_default().number,entry:prop_types_default().shape({after:prop_types_default().string,before:prop_types_default().string,children:prop_types_default().arrayOf(prop_types_default().any),key:prop_types_default().string}),expanded:prop_types_default().bool};static defaultProps={depth:0};state={expanded:this.props.expanded};expand=()=>{this.setState({expanded:!0})};render(){const entry=this.props.entry,propertyDeleted="removed"===entry.status,propertyAdded="added"===entry.status,propertyChanged="changed"===entry.status,hasChildren=entry.children.length>0,leftClass=classnames_default()({removed:propertyDeleted||propertyChanged&&!hasChildren,dark:propertyDeleted,"blank-space":propertyAdded}),rightClass=classnames_default()({added:propertyAdded||propertyChanged&&!hasChildren,dark:propertyAdded,"blank-space":propertyDeleted});let shownChildren;shownChildren=this.state.expanded?entry.children:(0,index_all.ZP)(entry.children).select((function(child){return"unchanged"!==child.status}));let collapsed=shownChildren.length<entry.children.length;entry.children.length===shownChildren.length+1&&(shownChildren=entry.children,collapsed=!1);const self=this;return react.createElement("div",null,entry.key&&react.createElement("div",{style:{clear:"both"}},react.createElement(DiffSide,{side:"before",className:leftClass,depth:this.props.depth,propKey:entry.key,showKey:!propertyAdded,value:entry.before}),react.createElement(DiffSide,{side:"after",className:rightClass,depth:this.props.depth,propKey:entry.key,showKey:!propertyDeleted,value:entry.after})),index_all.ZP.map(shownChildren,(function(child){return react.createElement(DiffEntry,{key:child.key,depth:self.props.depth+1,entry:child,expanded:self.state.expanded})})),collapsed&&react.createElement(CollapsedRow,{depth:this.props.depth+1,onClick:this.expand}))}}class ImageWidgetDiff extends react.Component{static propTypes={after:prop_types_default().shape({options:prop_types_default().objectOf(prop_types_default().any)}).isRequired,before:prop_types_default().shape({options:prop_types_default().objectOf(prop_types_default().any)}).isRequired};render(){const{before,after}=this.props,beforeSrc=before.options&&before.options.backgroundImage?before.options.backgroundImage.url:"",afterSrc=after.options&&after.options.backgroundImage?after.options.backgroundImage.url:"";return react.createElement("div",null,react.createElement("div",{className:"diff-row before"},beforeSrc&&react.createElement("div",{className:classnames_default()({image:!0,"image-unchanged":beforeSrc===afterSrc,"image-removed":beforeSrc!==afterSrc})},react.createElement(SvgImage,{src:beforeSrc,title:beforeSrc}))),react.createElement("div",{className:"diff-row after"},afterSrc&&react.createElement("div",{className:classnames_default()({image:!0,"image-unchanged":beforeSrc===afterSrc,"image-added":beforeSrc!==afterSrc})},react.createElement(SvgImage,{src:afterSrc,title:afterSrc}))))}}class WidgetDiff extends react.Component{static propTypes={after:prop_types_default().shape({options:prop_types_default().objectOf(prop_types_default().any)}),before:prop_types_default().shape({options:prop_types_default().objectOf(prop_types_default().any)}),title:prop_types_default().string.isRequired,type:prop_types_default().string};static defaultProps={after:{},before:{},type:""};render(){const{after,before,title,type}=this.props,diff=widget_diff_performer(before,after);return react.createElement("div",null,react.createElement("div",{className:"diff-header"},title),react.createElement("div",{className:"diff-header"},title),react.createElement("div",{className:"diff-body ui-helper-clearfix"},"image"===type&&react.createElement(ImageWidgetDiff,{before,after}),react.createElement(DiffEntry,{entry:diff})))}}const widget_diff=WidgetDiff;try{WidgetDiff.displayName="WidgetDiff",WidgetDiff.__docgenInfo={description:"",displayName:"WidgetDiff",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/perseus-editor/src/diffs/widget-diff.tsx#WidgetDiff"]={docgenInfo:WidgetDiff.__docgenInfo,name:"WidgetDiff",path:"packages/perseus-editor/src/diffs/widget-diff.tsx#WidgetDiff"})}catch(__react_docgen_typescript_loader_error){}const filterWidgetInfo=function(widgetInfo,showAlignmentOptions){const{alignment,graded,options,type}=widgetInfo||{},filteredWidgetInfo={options};return showAlignmentOptions&&src.Cu.getSupportedAlignments(type).length>1&&(filteredWidgetInfo.alignment=alignment),"transformer"===type&&(filteredWidgetInfo.graded=graded),src.Cu.supportsStaticMode(type)&&(filteredWidgetInfo.static=widgetInfo?.static??void 0),filteredWidgetInfo};class RendererDiff extends react.Component{static defaultProps={after:{content:"",images:{},widgets:{}},before:{content:"",images:{},widgets:{}},showAlignmentOptions:!1,showSeparator:!1};render(){const{after,before,showAlignmentOptions,showSeparator,title}=this.props;let textDiff,widgetsDiff;(before.content||after.content)&&(textDiff=react.createElement(text_diff.Z,{before:before.content,after:after.content,title}));const beforeWidgets=Object.keys(before.widgets??{}).filter((widget=>before.content.includes(widget))),afterWidgets=Object.keys(after.widgets??{}).filter((widget=>after.content.includes(widget)));if(beforeWidgets.length||afterWidgets.length){widgetsDiff=index_all.ZP.union(beforeWidgets,afterWidgets).map((widget=>react.createElement(widget_diff,{before:filterWidgetInfo(before.widgets?.[widget],showAlignmentOptions),after:filterWidgetInfo(after.widgets?.[widget],showAlignmentOptions),title:widget,type:(before.widgets?.[widget]??{}).type||(after.widgets?.[widget]??{}).type,key:widget})))}return react.createElement("div",null,textDiff,widgetsDiff,showSeparator&&react.createElement("div",{className:"diff-separator"}))}}const renderer_diff=RendererDiff;try{RendererDiff.displayName="RendererDiff",RendererDiff.__docgenInfo={description:"",displayName:"RendererDiff",props:{after:{defaultValue:{value:'{\n            content: "",\n            images: {},\n            widgets: {},\n        }'},description:"",name:"after",required:!1,type:{name:"RendererProps"}},before:{defaultValue:{value:'{\n            content: "",\n            images: {},\n            widgets: {},\n        }'},description:"",name:"before",required:!1,type:{name:"RendererProps"}},showAlignmentOptions:{defaultValue:{value:"false"},description:"",name:"showAlignmentOptions",required:!1,type:{name:"boolean"}},showSeparator:{defaultValue:{value:"false"},description:"",name:"showSeparator",required:!1,type:{name:"boolean"}},title:{defaultValue:null,description:"",name:"title",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/perseus-editor/src/diffs/renderer-diff.tsx#RendererDiff"]={docgenInfo:RendererDiff.__docgenInfo,name:"RendererDiff",path:"packages/perseus-editor/src/diffs/renderer-diff.tsx#RendererDiff"})}catch(__react_docgen_typescript_loader_error){}var tags_diff=__webpack_require__("./packages/perseus-editor/src/diffs/tags-diff.tsx");function beginsWith(path,beginPath){let matches=!0;for(let i=0;i<beginPath.length;i++){if(i>=path.length)return!1;beginPath[i]!==path[i]&&(matches=!1)}return matches}function checkPath(beforePath,afterPath){if(beforePath.length!==afterPath.length)return!1;for(let i=0,l=beforePath.length;i<l;i++)if(beforePath[i]!==afterPath[i])return!1;return!0}class StructuredItemDiff extends react.Component{static generateCompletePathsList(beforeList,afterList,result,shape,path){if("content"===shape.type||"hint"===shape.type||"tags"===shape.type){const beforePath=beforeList.length>0&&checkPath(path,beforeList[0][1]),afterPath=afterList.length>0&&checkPath(path,afterList[0][1]);beforePath&&afterPath?(result.push(path),beforeList.splice(0,1),afterList.splice(0,1)):beforePath?(result.push(path),beforeList.splice(0,1)):afterPath&&(result.push(path),afterList.splice(0,1))}else if("array"===shape.type){let index=0,newPath=path.concat(index);for(;beforeList.length>0&&beginsWith(beforeList[0][1],newPath)||afterList.length>0&&beginsWith(afterList[0][1],newPath);)StructuredItemDiff.generateCompletePathsList(beforeList,afterList,result,shape.elementShape,newPath),index++,newPath=path.concat(index)}else if("object"===shape.type){const keys=Object.keys(shape.shape);for(let i=0;i<keys.length;i++){const newPath=path.concat([keys[i]]);StructuredItemDiff.generateCompletePathsList(beforeList,afterList,result,shape.shape[keys[i]],newPath)}}}render(){const{before,after,shape,tags}=this.props,beforeList=[],afterList=[];(0,src.f_)().setContentMapper(((c,_,p)=>beforeList.push([c,p]))).setHintMapper(((c,_,p)=>beforeList.push([c,p]))).setTagsMapper(((c,_,p)=>beforeList.push([c,p]))).mapTree((0,src.uJ)(before),shape),(0,src.f_)().setContentMapper(((c,_,p)=>afterList.push([c,p]))).setHintMapper(((c,_,p)=>afterList.push([c,p]))).setTagsMapper(((c,_,p)=>afterList.push([c,p]))).mapTree((0,src.uJ)(after),shape);const beforeListModified=beforeList.slice(),afterListModified=afterList.slice(),allDiffPaths=[];StructuredItemDiff.generateCompletePathsList(beforeListModified,afterListModified,allDiffPaths,shape,[]);const diffCount=allDiffPaths.length,diffs=allDiffPaths.map(((path,n)=>{const isTag="tags"===path[path.length-1],currentTitle=function getTitle(path){const title=[];for(let i=0;i<path.length;i++)"number"==typeof path[i]?title.push((path[i]+1).toString()+":"):title.push(path[i]);return title.join(" ")}(path);let before=beforeList.find((e=>checkPath(e[1],path))),after=afterList.find((e=>checkPath(e[1],path)));if(isTag){before||(before=[[],path]),after||(after=[[],path]);const beforeTags=[];Array.isArray(before[0])&&before[0].forEach((tagId=>{"string"==typeof tagId&&beforeTags.push(tags.idToName(tagId))}));const afterTags=[];Array.isArray(after[0])&&after[0].forEach((tagId=>{"string"==typeof tagId&&afterTags.push(tags.idToName(tagId))}));const intersection=beforeTags.filter((tag=>afterTags.includes(tag))),beforeOnly=beforeTags.filter((tag=>!afterTags.includes(tag))),afterOnly=afterTags.filter((tag=>!beforeTags.includes(tag)));return react.createElement(tags_diff.Z,{beforeOnly,afterOnly,intersection,title:currentTitle,showSeparator:n<diffCount-1,key:n})}return before||(before=[(0,src.o)(src.JZ.content),path]),after||(after=[(0,src.o)(src.JZ.content),path]),react.createElement(renderer_diff,{before:before[0],after:after[0],title:currentTitle,showAlignmentOptions:!1,showSeparator:n<diffCount-1,key:n})}));return react.createElement("div",{className:"framework-perseus"},diffs)}}const structured_item_diff=StructuredItemDiff;try{StructuredItemDiff.displayName="StructuredItemDiff",StructuredItemDiff.__docgenInfo={description:"",displayName:"StructuredItemDiff",props:{after:{defaultValue:null,description:"",name:"after",required:!0,type:{name:"Item"}},before:{defaultValue:null,description:"",name:"before",required:!0,type:{name:"Item"}},shape:{defaultValue:null,description:"",name:"shape",required:!0,type:{name:"Shape"}},tags:{defaultValue:null,description:"",name:"tags",required:!0,type:{name:"Tag"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/perseus-editor/src/diffs/structured-item-diff.tsx#StructuredItemDiff"]={docgenInfo:StructuredItemDiff.__docgenInfo,name:"StructuredItemDiff",path:"packages/perseus-editor/src/diffs/structured-item-diff.tsx#StructuredItemDiff"})}catch(__react_docgen_typescript_loader_error){}var perseus_diff_wrapper=__webpack_require__("./packages/perseus-editor/src/diffs/__stories__/perseus-diff-wrapper.tsx");__webpack_require__.e(7560).then(__webpack_require__.t.bind(__webpack_require__,"./packages/perseus-editor/src/styles/perseus-editor.less",23));const structured_item_diff_stories={title:"Perseus/Editor/Diffs/Structured Item Diff",decorators:[StoryComponent=>react.createElement(perseus_diff_wrapper.Z,null,react.createElement(StoryComponent,null))]},tags={a:"a tag",b:"b tag",c:"c tag"},ContentAdded=args=>{const props={before:{_multi:{directions:{__type:"content",content:"",images:{},widgets:{}},passage:{type:"content",content:"",images:{},widgets:{}},overview:{type:"content",content:"",images:{},widgets:{}},hints:[],questions:[]}},after:{_multi:{directions:{type:"content",content:"directions",images:{},widgets:{}},passage:{type:"content",content:"passage",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},hints:[{type:"hint",content:"hint 1",images:{},widgets:{}}],questions:[{hints:[{type:"hint",content:"question hint 1",images:{},widgets:{}}],keepInMind:{type:"content",content:"keep in mind",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},question:{type:"content",content:"question",images:{},widgets:{}},tags:["a","b"]}]}},shape:{type:"object",shape:{directions:{type:"content"},overview:{type:"content"},passage:{type:"content"},hints:{type:"array",elementShape:{type:"hint"}},questions:{type:"array",elementShape:{type:"object",shape:{tags:{type:"tags"},question:{type:"content"},overview:{type:"content"},keepInMind:{type:"content"},hints:{type:"array",elementShape:{type:"hint"}}}}}}},tags:{idToName:id=>tags[id],nameToId:name=>name[0],names:["a tag","b tag","c tag"]}};return react.createElement(structured_item_diff,props)},ContentAddedRemovedAndChanged=args=>{const props={before:{_multi:{directions:{__type:"content",content:"directions",images:{},widgets:{}},passage:{type:"content",content:"passage",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},hints:[{type:"hint",content:"hint 1",images:{},widgets:{}},{type:"hint",content:"hint 2",images:{},widgets:{}}],questions:[{hints:[{type:"hint",content:"question hint 1",images:{},widgets:{}}],keepInMind:{type:"content",content:"keep in mind",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},question:{type:"content",content:"question",images:{},widgets:{}},tags:["a","b"]}]}},after:{_multi:{directions:{type:"content",content:"directions",images:{},widgets:{}},passage:{type:"content",content:"passage",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},hints:[{type:"hint",content:"hint 1",images:{},widgets:{}}],questions:[{hints:[],keepInMind:{type:"content",content:"keep in mind",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},question:{type:"content",content:"question edited",images:{},widgets:{}},tags:["a","c"]},{hints:[{type:"hint",content:"question hint 1",images:{},widgets:{}}],keepInMind:{type:"content",content:"keep in mind",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},question:{type:"content",content:"question",images:{},widgets:{}},tags:["a","b"]}]}},shape:{type:"object",shape:{directions:{type:"content"},overview:{type:"content"},passage:{type:"content"},hints:{type:"array",elementShape:{type:"hint"}},questions:{type:"array",elementShape:{type:"object",shape:{tags:{type:"tags"},question:{type:"content"},overview:{type:"content"},keepInMind:{type:"content"},hints:{type:"array",elementShape:{type:"hint"}}}}}}},tags:{idToName:id=>tags[id],nameToId:name=>name[0],names:["a tag","b tag","c tag"]}};return react.createElement(structured_item_diff,props)},MiscContentChanges=args=>{const props={before:{_multi:{directions:{__type:"content",content:"directions",images:{},widgets:{}},passage:{type:"content",content:"passage",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},hints:[{type:"hint",content:"hint 1",images:{},widgets:{}},{type:"hint",content:"hint 2",images:{},widgets:{}},{type:"hint",content:"hint 3",images:{},widgets:{}}],questions:[{hints:[{type:"hint",content:"question hint 1",images:{},widgets:{}},{type:"hint",content:"question hint 2",images:{},widgets:{}},{type:"hint",content:"question hint 3",images:{},widgets:{}}],keepInMind:{type:"content",content:"keep in mind",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},question:{type:"content",content:"question edited",images:{},widgets:{}},tags:["a","c"]},{hints:[{type:"hint",content:"question hint 1",images:{},widgets:{}}],keepInMind:{type:"content",content:"keep in mind",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},question:{type:"content",content:"question",images:{},widgets:{}},tags:["a","b"]},{hints:[{type:"hint",content:"question hint 1",images:{},widgets:{}}],keepInMind:{type:"content",content:"keep in mind",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},question:{type:"content",content:"question",images:{},widgets:{}},tags:["a","b"]}]}},after:{_multi:{directions:{__type:"content",content:"directions",images:{},widgets:{}},passage:{type:"content",content:"passage",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},hints:[{type:"hint",content:"hint 1",images:{},widgets:{}},{type:"hint",content:"hint 2",images:{},widgets:{}}],questions:[{hints:[{type:"hint",content:"question hint 1 edited",images:{},widgets:{}}],keepInMind:{type:"content",content:"keep in mind",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},question:{type:"content",content:"question edited",images:{},widgets:{}},tags:["a","c"]},{hints:[{type:"hint",content:"question hint 1",images:{},widgets:{}}],keepInMind:{type:"content",content:"keep in mind",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},question:{type:"content",content:"question",images:{},widgets:{}},tags:["a","b"]}]}},shape:{type:"object",shape:{directions:{type:"content"},overview:{type:"content"},passage:{type:"content"},hints:{type:"array",elementShape:{type:"hint"}},questions:{type:"array",elementShape:{type:"object",shape:{tags:{type:"tags"},question:{type:"content"},overview:{type:"content"},keepInMind:{type:"content"},hints:{type:"array",elementShape:{type:"hint"}}}}}}},tags:{idToName:id=>tags[id],nameToId:name=>name[0],names:["a tag","b tag","c tag"]}};return react.createElement(structured_item_diff,props)},ContentRemoved=args=>{const props={before:{_multi:{directions:{__type:"content",content:"directions",images:{},widgets:{}},passage:{type:"content",content:"passage",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},hints:[{type:"hint",content:"hint 1",images:{},widgets:{}},{type:"hint",content:"hint 2",images:{},widgets:{}}],questions:[{hints:[{type:"hint",content:"question hint 1 edited",images:{},widgets:{}}],keepInMind:{type:"content",content:"keep in mind",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},question:{type:"content",content:"question edited",images:{},widgets:{}},tags:["a","c"]},{hints:[{type:"hint",content:"question hint 1",images:{},widgets:{}}],keepInMind:{type:"content",content:"keep in mind",images:{},widgets:{}},overview:{type:"content",content:"overview",images:{},widgets:{}},question:{type:"content",content:"question",images:{},widgets:{}},tags:["a","b"]}]}},after:{_multi:{directions:{__type:"content",content:"",images:{},widgets:{}},passage:{type:"content",content:"",images:{},widgets:{}},overview:{type:"content",content:"",images:{},widgets:{}},hints:[],questions:[]}},shape:{type:"object",shape:{directions:{type:"content"},overview:{type:"content"},passage:{type:"content"},hints:{type:"array",elementShape:{type:"hint"}},questions:{type:"array",elementShape:{type:"object",shape:{tags:{type:"tags"},question:{type:"content"},overview:{type:"content"},keepInMind:{type:"content"},hints:{type:"array",elementShape:{type:"hint"}}}}}}},tags:{idToName:id=>tags[id],nameToId:name=>name[0],names:["a tag","b tag","c tag"]}};return react.createElement(structured_item_diff,props)};ContentAdded.parameters={...ContentAdded.parameters,docs:{...ContentAdded.parameters?.docs,source:{originalSource:'(args: StoryArgs): React.ReactElement => {\n  const props = ({\n    before: {\n      _multi: {\n        directions: {\n          __type: "content",\n          content: "",\n          images: {},\n          widgets: {}\n        },\n        passage: {\n          type: "content",\n          content: "",\n          images: {},\n          widgets: {}\n        },\n        overview: {\n          type: "content",\n          content: "",\n          images: {},\n          widgets: {}\n        },\n        hints: [],\n        questions: []\n      }\n    },\n    after: {\n      _multi: {\n        directions: {\n          type: "content",\n          content: "directions",\n          images: {},\n          widgets: {}\n        },\n        passage: {\n          type: "content",\n          content: "passage",\n          images: {},\n          widgets: {}\n        },\n        overview: {\n          type: "content",\n          content: "overview",\n          images: {},\n          widgets: {}\n        },\n        hints: [{\n          type: "hint",\n          content: "hint 1",\n          images: {},\n          widgets: {}\n        }],\n        questions: [{\n          hints: [{\n            type: "hint",\n            content: "question hint 1",\n            images: {},\n            widgets: {}\n          }],\n          keepInMind: {\n            type: "content",\n            content: "keep in mind",\n            images: {},\n            widgets: {}\n          },\n          overview: {\n            type: "content",\n            content: "overview",\n            images: {},\n            widgets: {}\n          },\n          question: {\n            type: "content",\n            content: "question",\n            images: {},\n            widgets: {}\n          },\n          tags: ["a", "b"]\n        }]\n      }\n    },\n    shape: {\n      type: "object",\n      shape: {\n        directions: {\n          type: "content"\n        },\n        overview: {\n          type: "content"\n        },\n        passage: {\n          type: "content"\n        },\n        hints: {\n          type: "array",\n          elementShape: {\n            type: "hint"\n          }\n        },\n        questions: {\n          type: "array",\n          elementShape: {\n            type: "object",\n            shape: {\n              tags: {\n                type: "tags"\n              },\n              question: {\n                type: "content"\n              },\n              overview: {\n                type: "content"\n              },\n              keepInMind: {\n                type: "content"\n              },\n              hints: {\n                type: "array",\n                elementShape: {\n                  type: "hint"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    tags: {\n      idToName: id => tags[id],\n      nameToId: name => name[0],\n      names: ["a tag", "b tag", "c tag"]\n    }\n  } as const);\n  return <StructuredItemDiff {...props} />;\n}',...ContentAdded.parameters?.docs?.source}}},ContentAddedRemovedAndChanged.parameters={...ContentAddedRemovedAndChanged.parameters,docs:{...ContentAddedRemovedAndChanged.parameters?.docs,source:{originalSource:'(args: StoryArgs): React.ReactElement => {\n  const props = ({\n    before: {\n      _multi: {\n        directions: {\n          __type: "content",\n          content: "directions",\n          images: {},\n          widgets: {}\n        },\n        passage: {\n          type: "content",\n          content: "passage",\n          images: {},\n          widgets: {}\n        },\n        overview: {\n          type: "content",\n          content: "overview",\n          images: {},\n          widgets: {}\n        },\n        hints: [{\n          type: "hint",\n          content: "hint 1",\n          images: {},\n          widgets: {}\n        }, {\n          type: "hint",\n          content: "hint 2",\n          images: {},\n          widgets: {}\n        }],\n        questions: [{\n          hints: [{\n            type: "hint",\n            content: "question hint 1",\n            images: {},\n            widgets: {}\n          }],\n          keepInMind: {\n            type: "content",\n            content: "keep in mind",\n            images: {},\n            widgets: {}\n          },\n          overview: {\n            type: "content",\n            content: "overview",\n            images: {},\n            widgets: {}\n          },\n          question: {\n            type: "content",\n            content: "question",\n            images: {},\n            widgets: {}\n          },\n          tags: ["a", "b"]\n        }]\n      }\n    },\n    after: {\n      _multi: {\n        directions: {\n          type: "content",\n          content: "directions",\n          images: {},\n          widgets: {}\n        },\n        passage: {\n          type: "content",\n          content: "passage",\n          images: {},\n          widgets: {}\n        },\n        overview: {\n          type: "content",\n          content: "overview",\n          images: {},\n          widgets: {}\n        },\n        hints: [{\n          type: "hint",\n          content: "hint 1",\n          images: {},\n          widgets: {}\n        }],\n        questions: [{\n          hints: [],\n          keepInMind: {\n            type: "content",\n            content: "keep in mind",\n            images: {},\n            widgets: {}\n          },\n          overview: {\n            type: "content",\n            content: "overview",\n            images: {},\n            widgets: {}\n          },\n          question: {\n            type: "content",\n            content: "question edited",\n            images: {},\n            widgets: {}\n          },\n          tags: ["a", "c"]\n        }, {\n          hints: [{\n            type: "hint",\n            content: "question hint 1",\n            images: {},\n            widgets: {}\n          }],\n          keepInMind: {\n            type: "content",\n            content: "keep in mind",\n            images: {},\n            widgets: {}\n          },\n          overview: {\n            type: "content",\n            content: "overview",\n            images: {},\n            widgets: {}\n          },\n          question: {\n            type: "content",\n            content: "question",\n            images: {},\n            widgets: {}\n          },\n          tags: ["a", "b"]\n        }]\n      }\n    },\n    shape: {\n      type: "object",\n      shape: {\n        directions: {\n          type: "content"\n        },\n        overview: {\n          type: "content"\n        },\n        passage: {\n          type: "content"\n        },\n        hints: {\n          type: "array",\n          elementShape: {\n            type: "hint"\n          }\n        },\n        questions: {\n          type: "array",\n          elementShape: {\n            type: "object",\n            shape: {\n              tags: {\n                type: "tags"\n              },\n              question: {\n                type: "content"\n              },\n              overview: {\n                type: "content"\n              },\n              keepInMind: {\n                type: "content"\n              },\n              hints: {\n                type: "array",\n                elementShape: {\n                  type: "hint"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    tags: {\n      idToName: id => tags[id],\n      nameToId: name => name[0],\n      names: ["a tag", "b tag", "c tag"]\n    }\n  } as const);\n  return <StructuredItemDiff {...props} />;\n}',...ContentAddedRemovedAndChanged.parameters?.docs?.source}}},MiscContentChanges.parameters={...MiscContentChanges.parameters,docs:{...MiscContentChanges.parameters?.docs,source:{originalSource:'(args: StoryArgs): React.ReactElement => {\n  const props = ({\n    before: {\n      _multi: {\n        directions: {\n          __type: "content",\n          content: "directions",\n          images: {},\n          widgets: {}\n        },\n        passage: {\n          type: "content",\n          content: "passage",\n          images: {},\n          widgets: {}\n        },\n        overview: {\n          type: "content",\n          content: "overview",\n          images: {},\n          widgets: {}\n        },\n        hints: [{\n          type: "hint",\n          content: "hint 1",\n          images: {},\n          widgets: {}\n        }, {\n          type: "hint",\n          content: "hint 2",\n          images: {},\n          widgets: {}\n        }, {\n          type: "hint",\n          content: "hint 3",\n          images: {},\n          widgets: {}\n        }],\n        questions: [{\n          hints: [{\n            type: "hint",\n            content: "question hint 1",\n            images: {},\n            widgets: {}\n          }, {\n            type: "hint",\n            content: "question hint 2",\n            images: {},\n            widgets: {}\n          }, {\n            type: "hint",\n            content: "question hint 3",\n            images: {},\n            widgets: {}\n          }],\n          keepInMind: {\n            type: "content",\n            content: "keep in mind",\n            images: {},\n            widgets: {}\n          },\n          overview: {\n            type: "content",\n            content: "overview",\n            images: {},\n            widgets: {}\n          },\n          question: {\n            type: "content",\n            content: "question edited",\n            images: {},\n            widgets: {}\n          },\n          tags: ["a", "c"]\n        }, {\n          hints: [{\n            type: "hint",\n            content: "question hint 1",\n            images: {},\n            widgets: {}\n          }],\n          keepInMind: {\n            type: "content",\n            content: "keep in mind",\n            images: {},\n            widgets: {}\n          },\n          overview: {\n            type: "content",\n            content: "overview",\n            images: {},\n            widgets: {}\n          },\n          question: {\n            type: "content",\n            content: "question",\n            images: {},\n            widgets: {}\n          },\n          tags: ["a", "b"]\n        }, {\n          hints: [{\n            type: "hint",\n            content: "question hint 1",\n            images: {},\n            widgets: {}\n          }],\n          keepInMind: {\n            type: "content",\n            content: "keep in mind",\n            images: {},\n            widgets: {}\n          },\n          overview: {\n            type: "content",\n            content: "overview",\n            images: {},\n            widgets: {}\n          },\n          question: {\n            type: "content",\n            content: "question",\n            images: {},\n            widgets: {}\n          },\n          tags: ["a", "b"]\n        }]\n      }\n    },\n    after: {\n      _multi: {\n        directions: {\n          __type: "content",\n          content: "directions",\n          images: {},\n          widgets: {}\n        },\n        passage: {\n          type: "content",\n          content: "passage",\n          images: {},\n          widgets: {}\n        },\n        overview: {\n          type: "content",\n          content: "overview",\n          images: {},\n          widgets: {}\n        },\n        hints: [{\n          type: "hint",\n          content: "hint 1",\n          images: {},\n          widgets: {}\n        }, {\n          type: "hint",\n          content: "hint 2",\n          images: {},\n          widgets: {}\n        }],\n        questions: [{\n          hints: [{\n            type: "hint",\n            content: "question hint 1 edited",\n            images: {},\n            widgets: {}\n          }],\n          keepInMind: {\n            type: "content",\n            content: "keep in mind",\n            images: {},\n            widgets: {}\n          },\n          overview: {\n            type: "content",\n            content: "overview",\n            images: {},\n            widgets: {}\n          },\n          question: {\n            type: "content",\n            content: "question edited",\n            images: {},\n            widgets: {}\n          },\n          tags: ["a", "c"]\n        }, {\n          hints: [{\n            type: "hint",\n            content: "question hint 1",\n            images: {},\n            widgets: {}\n          }],\n          keepInMind: {\n            type: "content",\n            content: "keep in mind",\n            images: {},\n            widgets: {}\n          },\n          overview: {\n            type: "content",\n            content: "overview",\n            images: {},\n            widgets: {}\n          },\n          question: {\n            type: "content",\n            content: "question",\n            images: {},\n            widgets: {}\n          },\n          tags: ["a", "b"]\n        }]\n      }\n    },\n    shape: {\n      type: "object",\n      shape: {\n        directions: {\n          type: "content"\n        },\n        overview: {\n          type: "content"\n        },\n        passage: {\n          type: "content"\n        },\n        hints: {\n          type: "array",\n          elementShape: {\n            type: "hint"\n          }\n        },\n        questions: {\n          type: "array",\n          elementShape: {\n            type: "object",\n            shape: {\n              tags: {\n                type: "tags"\n              },\n              question: {\n                type: "content"\n              },\n              overview: {\n                type: "content"\n              },\n              keepInMind: {\n                type: "content"\n              },\n              hints: {\n                type: "array",\n                elementShape: {\n                  type: "hint"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    tags: {\n      idToName: id => tags[id],\n      nameToId: name => name[0],\n      names: ["a tag", "b tag", "c tag"]\n    }\n  } as const);\n  return <StructuredItemDiff {...props} />;\n}',...MiscContentChanges.parameters?.docs?.source}}},ContentRemoved.parameters={...ContentRemoved.parameters,docs:{...ContentRemoved.parameters?.docs,source:{originalSource:'(args: StoryArgs): React.ReactElement => {\n  const props = ({\n    before: {\n      _multi: {\n        directions: {\n          __type: "content",\n          content: "directions",\n          images: {},\n          widgets: {}\n        },\n        passage: {\n          type: "content",\n          content: "passage",\n          images: {},\n          widgets: {}\n        },\n        overview: {\n          type: "content",\n          content: "overview",\n          images: {},\n          widgets: {}\n        },\n        hints: [{\n          type: "hint",\n          content: "hint 1",\n          images: {},\n          widgets: {}\n        }, {\n          type: "hint",\n          content: "hint 2",\n          images: {},\n          widgets: {}\n        }],\n        questions: [{\n          hints: [{\n            type: "hint",\n            content: "question hint 1 edited",\n            images: {},\n            widgets: {}\n          }],\n          keepInMind: {\n            type: "content",\n            content: "keep in mind",\n            images: {},\n            widgets: {}\n          },\n          overview: {\n            type: "content",\n            content: "overview",\n            images: {},\n            widgets: {}\n          },\n          question: {\n            type: "content",\n            content: "question edited",\n            images: {},\n            widgets: {}\n          },\n          tags: ["a", "c"]\n        }, {\n          hints: [{\n            type: "hint",\n            content: "question hint 1",\n            images: {},\n            widgets: {}\n          }],\n          keepInMind: {\n            type: "content",\n            content: "keep in mind",\n            images: {},\n            widgets: {}\n          },\n          overview: {\n            type: "content",\n            content: "overview",\n            images: {},\n            widgets: {}\n          },\n          question: {\n            type: "content",\n            content: "question",\n            images: {},\n            widgets: {}\n          },\n          tags: ["a", "b"]\n        }]\n      }\n    },\n    after: {\n      _multi: {\n        directions: {\n          __type: "content",\n          content: "",\n          images: {},\n          widgets: {}\n        },\n        passage: {\n          type: "content",\n          content: "",\n          images: {},\n          widgets: {}\n        },\n        overview: {\n          type: "content",\n          content: "",\n          images: {},\n          widgets: {}\n        },\n        hints: [],\n        questions: []\n      }\n    },\n    shape: {\n      type: "object",\n      shape: {\n        directions: {\n          type: "content"\n        },\n        overview: {\n          type: "content"\n        },\n        passage: {\n          type: "content"\n        },\n        hints: {\n          type: "array",\n          elementShape: {\n            type: "hint"\n          }\n        },\n        questions: {\n          type: "array",\n          elementShape: {\n            type: "object",\n            shape: {\n              tags: {\n                type: "tags"\n              },\n              question: {\n                type: "content"\n              },\n              overview: {\n                type: "content"\n              },\n              keepInMind: {\n                type: "content"\n              },\n              hints: {\n                type: "array",\n                elementShape: {\n                  type: "hint"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    tags: {\n      idToName: id => tags[id],\n      nameToId: name => name[0],\n      names: ["a tag", "b tag", "c tag"]\n    }\n  } as const);\n  return <StructuredItemDiff {...props} />;\n}',...ContentRemoved.parameters?.docs?.source}}};try{ContentAdded.displayName="ContentAdded",ContentAdded.__docgenInfo={description:"",displayName:"ContentAdded",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/perseus-editor/src/diffs/__stories__/structured-item-diff.stories.tsx#ContentAdded"]={docgenInfo:ContentAdded.__docgenInfo,name:"ContentAdded",path:"packages/perseus-editor/src/diffs/__stories__/structured-item-diff.stories.tsx#ContentAdded"})}catch(__react_docgen_typescript_loader_error){}try{ContentAddedRemovedAndChanged.displayName="ContentAddedRemovedAndChanged",ContentAddedRemovedAndChanged.__docgenInfo={description:"",displayName:"ContentAddedRemovedAndChanged",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/perseus-editor/src/diffs/__stories__/structured-item-diff.stories.tsx#ContentAddedRemovedAndChanged"]={docgenInfo:ContentAddedRemovedAndChanged.__docgenInfo,name:"ContentAddedRemovedAndChanged",path:"packages/perseus-editor/src/diffs/__stories__/structured-item-diff.stories.tsx#ContentAddedRemovedAndChanged"})}catch(__react_docgen_typescript_loader_error){}try{MiscContentChanges.displayName="MiscContentChanges",MiscContentChanges.__docgenInfo={description:"",displayName:"MiscContentChanges",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/perseus-editor/src/diffs/__stories__/structured-item-diff.stories.tsx#MiscContentChanges"]={docgenInfo:MiscContentChanges.__docgenInfo,name:"MiscContentChanges",path:"packages/perseus-editor/src/diffs/__stories__/structured-item-diff.stories.tsx#MiscContentChanges"})}catch(__react_docgen_typescript_loader_error){}try{ContentRemoved.displayName="ContentRemoved",ContentRemoved.__docgenInfo={description:"",displayName:"ContentRemoved",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/perseus-editor/src/diffs/__stories__/structured-item-diff.stories.tsx#ContentRemoved"]={docgenInfo:ContentRemoved.__docgenInfo,name:"ContentRemoved",path:"packages/perseus-editor/src/diffs/__stories__/structured-item-diff.stories.tsx#ContentRemoved"})}catch(__react_docgen_typescript_loader_error){}},"./packages/perseus-editor/src/diffs/tags-diff.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_text_diff__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/perseus-editor/src/diffs/text-diff.tsx");class TagsDiff extends react__WEBPACK_IMPORTED_MODULE_0__.Component{static defaultProps={afterOnly:[],beforeOnly:[],showSeparator:!1,title:"Question tags"};render(){const{afterOnly,beforeOnly,intersection,showSeparator}=this.props,beforeTags=intersection.concat(beforeOnly).join("\n")+"\n",afterTags=intersection.concat(afterOnly).join("\n")+"\n";return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_text_diff__WEBPACK_IMPORTED_MODULE_1__.Z,{before:beforeTags,after:afterTags,title:this.props.title}),showSeparator&&react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"diff-separator"}))}}const __WEBPACK_DEFAULT_EXPORT__=TagsDiff;try{TagsDiff.displayName="TagsDiff",TagsDiff.__docgenInfo={description:"",displayName:"TagsDiff",props:{afterOnly:{defaultValue:{value:"[]"},description:"",name:"afterOnly",required:!1,type:{name:"readonly string[]"}},beforeOnly:{defaultValue:{value:"[]"},description:"",name:"beforeOnly",required:!1,type:{name:"readonly string[]"}},intersection:{defaultValue:null,description:"",name:"intersection",required:!0,type:{name:"readonly string[]"}},showSeparator:{defaultValue:{value:"false"},description:"",name:"showSeparator",required:!1,type:{name:"boolean"}},title:{defaultValue:{value:"Question tags"},description:"",name:"title",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/perseus-editor/src/diffs/tags-diff.tsx#TagsDiff"]={docgenInfo:TagsDiff.__docgenInfo,name:"TagsDiff",path:"packages/perseus-editor/src/diffs/tags-diff.tsx#TagsDiff"})}catch(__react_docgen_typescript_loader_error){}}}]);